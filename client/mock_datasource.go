// Code generated by MockGen. DO NOT EDIT.
// Source: data-service/generated/datasource (interfaces: DataSourceServiceClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	datasource "data-service/generated/datasource"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDataSourceServiceClient is a mock of DataSourceServiceClient interface.
type MockDataSourceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceServiceClientMockRecorder
}

// MockDataSourceServiceClientMockRecorder is the mock recorder for MockDataSourceServiceClient.
type MockDataSourceServiceClientMockRecorder struct {
	mock *MockDataSourceServiceClient
}

// NewMockDataSourceServiceClient creates a new mock instance.
func NewMockDataSourceServiceClient(ctrl *gomock.Controller) *MockDataSourceServiceClient {
	mock := &MockDataSourceServiceClient{ctrl: ctrl}
	mock.recorder = &MockDataSourceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSourceServiceClient) EXPECT() *MockDataSourceServiceClientMockRecorder {
	return m.recorder
}

// ReadBatchData mocks base method.
func (m *MockDataSourceServiceClient) ReadBatchData(arg0 context.Context, arg1 *datasource.BatchReadRequest, arg2 ...grpc.CallOption) (*datasource.BatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadBatchData", varargs...)
	ret0, _ := ret[0].(*datasource.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBatchData indicates an expected call of ReadBatchData.
func (mr *MockDataSourceServiceClientMockRecorder) ReadBatchData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBatchData", reflect.TypeOf((*MockDataSourceServiceClient)(nil).ReadBatchData), varargs...)
}

// ReadStreamingData mocks base method.
func (m *MockDataSourceServiceClient) ReadStreamingData(arg0 context.Context, arg1 *datasource.StreamReadRequest, arg2 ...grpc.CallOption) (grpc.ServerStreamingClient[datasource.ArrowDataBatch], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadStreamingData", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[datasource.ArrowDataBatch])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStreamingData indicates an expected call of ReadStreamingData.
func (mr *MockDataSourceServiceClientMockRecorder) ReadStreamingData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStreamingData", reflect.TypeOf((*MockDataSourceServiceClient)(nil).ReadStreamingData), varargs...)
}

// SendArrowData mocks base method.
func (m *MockDataSourceServiceClient) SendArrowData(arg0 context.Context, arg1 ...grpc.CallOption) (grpc.ClientStreamingClient[datasource.WriterDataRequest, datasource.Response], error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendArrowData", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[datasource.WriterDataRequest, datasource.Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendArrowData indicates an expected call of SendArrowData.
func (mr *MockDataSourceServiceClientMockRecorder) SendArrowData(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendArrowData", reflect.TypeOf((*MockDataSourceServiceClient)(nil).SendArrowData), varargs...)
}
