// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.0--rc2
// source: mira_ida_access_service.proto

// 表示当前 proto 文件属于 protobuf 包，它不是 go 文件的 package
// 主要用于导入外部 proto 文件

package ida

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MiraIdaAccess_GetPrivateDBConnInfo_FullMethodName        = "/proto.MiraIdaAccess/GetPrivateDBConnInfo"
	MiraIdaAccess_GetPrivateAssetInfoByEnName_FullMethodName = "/proto.MiraIdaAccess/GetPrivateAssetInfoByEnName"
	MiraIdaAccess_Encrypt_FullMethodName                     = "/proto.MiraIdaAccess/Encrypt"
)

// MiraIdaAccessClient is the client API for MiraIdaAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiraIdaAccessClient interface {
	// 1. 获取包含隐私信息的数据源连接信息接口
	GetPrivateDBConnInfo(ctx context.Context, in *GetPrivateDBConnInfoReq, opts ...grpc.CallOption) (*GetPrivateDBConnInfoResp, error)
	// 2. 通过资产英文名称获取资产详情
	GetPrivateAssetInfoByEnName(ctx context.Context, in *GetPrivateAssetInfoByEnNameReq, opts ...grpc.CallOption) (*GetPrivateAssetInfoByEnNameResp, error)
	// 加密接口
	Encrypt(ctx context.Context, in *KeyEncryptRequest, opts ...grpc.CallOption) (*KeyEncryptResponse, error)
}

type miraIdaAccessClient struct {
	cc grpc.ClientConnInterface
}

func NewMiraIdaAccessClient(cc grpc.ClientConnInterface) MiraIdaAccessClient {
	return &miraIdaAccessClient{cc}
}

func (c *miraIdaAccessClient) GetPrivateDBConnInfo(ctx context.Context, in *GetPrivateDBConnInfoReq, opts ...grpc.CallOption) (*GetPrivateDBConnInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateDBConnInfoResp)
	err := c.cc.Invoke(ctx, MiraIdaAccess_GetPrivateDBConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraIdaAccessClient) GetPrivateAssetInfoByEnName(ctx context.Context, in *GetPrivateAssetInfoByEnNameReq, opts ...grpc.CallOption) (*GetPrivateAssetInfoByEnNameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateAssetInfoByEnNameResp)
	err := c.cc.Invoke(ctx, MiraIdaAccess_GetPrivateAssetInfoByEnName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miraIdaAccessClient) Encrypt(ctx context.Context, in *KeyEncryptRequest, opts ...grpc.CallOption) (*KeyEncryptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyEncryptResponse)
	err := c.cc.Invoke(ctx, MiraIdaAccess_Encrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiraIdaAccessServer is the server API for MiraIdaAccess service.
// All implementations must embed UnimplementedMiraIdaAccessServer
// for forward compatibility.
type MiraIdaAccessServer interface {
	// 1. 获取包含隐私信息的数据源连接信息接口
	GetPrivateDBConnInfo(context.Context, *GetPrivateDBConnInfoReq) (*GetPrivateDBConnInfoResp, error)
	// 2. 通过资产英文名称获取资产详情
	GetPrivateAssetInfoByEnName(context.Context, *GetPrivateAssetInfoByEnNameReq) (*GetPrivateAssetInfoByEnNameResp, error)
	// 加密接口
	Encrypt(context.Context, *KeyEncryptRequest) (*KeyEncryptResponse, error)
	mustEmbedUnimplementedMiraIdaAccessServer()
}

// UnimplementedMiraIdaAccessServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiraIdaAccessServer struct{}

func (UnimplementedMiraIdaAccessServer) GetPrivateDBConnInfo(context.Context, *GetPrivateDBConnInfoReq) (*GetPrivateDBConnInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateDBConnInfo not implemented")
}
func (UnimplementedMiraIdaAccessServer) GetPrivateAssetInfoByEnName(context.Context, *GetPrivateAssetInfoByEnNameReq) (*GetPrivateAssetInfoByEnNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateAssetInfoByEnName not implemented")
}
func (UnimplementedMiraIdaAccessServer) Encrypt(context.Context, *KeyEncryptRequest) (*KeyEncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedMiraIdaAccessServer) mustEmbedUnimplementedMiraIdaAccessServer() {}
func (UnimplementedMiraIdaAccessServer) testEmbeddedByValue()                       {}

// UnsafeMiraIdaAccessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiraIdaAccessServer will
// result in compilation errors.
type UnsafeMiraIdaAccessServer interface {
	mustEmbedUnimplementedMiraIdaAccessServer()
}

func RegisterMiraIdaAccessServer(s grpc.ServiceRegistrar, srv MiraIdaAccessServer) {
	// If the following call pancis, it indicates UnimplementedMiraIdaAccessServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MiraIdaAccess_ServiceDesc, srv)
}

func _MiraIdaAccess_GetPrivateDBConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateDBConnInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraIdaAccessServer).GetPrivateDBConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiraIdaAccess_GetPrivateDBConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraIdaAccessServer).GetPrivateDBConnInfo(ctx, req.(*GetPrivateDBConnInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraIdaAccess_GetPrivateAssetInfoByEnName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateAssetInfoByEnNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraIdaAccessServer).GetPrivateAssetInfoByEnName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiraIdaAccess_GetPrivateAssetInfoByEnName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraIdaAccessServer).GetPrivateAssetInfoByEnName(ctx, req.(*GetPrivateAssetInfoByEnNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiraIdaAccess_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiraIdaAccessServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiraIdaAccess_Encrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiraIdaAccessServer).Encrypt(ctx, req.(*KeyEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiraIdaAccess_ServiceDesc is the grpc.ServiceDesc for MiraIdaAccess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiraIdaAccess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MiraIdaAccess",
	HandlerType: (*MiraIdaAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrivateDBConnInfo",
			Handler:    _MiraIdaAccess_GetPrivateDBConnInfo_Handler,
		},
		{
			MethodName: "GetPrivateAssetInfoByEnName",
			Handler:    _MiraIdaAccess_GetPrivateAssetInfoByEnName_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _MiraIdaAccess_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mira_ida_access_service.proto",
}
