// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.0--rc2
// source: data_source.proto

package datasource

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 文件类型的枚举定义
type FileType int32

const (
	FileType_FILE_TYPE_UNKNOWN FileType = 0 // 默认值，表示未知类型
	FileType_FILE_TYPE_CSV     FileType = 1 // CSV 文件
	FileType_FILE_TYPE_JSON    FileType = 2 // JSON 文件
	FileType_FILE_TYPE_PARQUET FileType = 3 // Parquet 文件
	FileType_FILE_TYPE_AVRO    FileType = 4 // Avro 文件
	FileType_FILE_TYPE_ARROW   FileType = 5
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE_TYPE_UNKNOWN",
		1: "FILE_TYPE_CSV",
		2: "FILE_TYPE_JSON",
		3: "FILE_TYPE_PARQUET",
		4: "FILE_TYPE_AVRO",
		5: "FILE_TYPE_ARROW",
	}
	FileType_value = map[string]int32{
		"FILE_TYPE_UNKNOWN": 0,
		"FILE_TYPE_CSV":     1,
		"FILE_TYPE_JSON":    2,
		"FILE_TYPE_PARQUET": 3,
		"FILE_TYPE_AVRO":    4,
		"FILE_TYPE_ARROW":   5,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_source_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_data_source_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{0}
}

// 连接响应，返回连接成功与否的信息
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功连接
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 错误或成功信息
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectUrl string `protobuf:"bytes,1,opt,name=ObjectUrl,proto3" json:"ObjectUrl,omitempty"` // 下载数据的url
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{1}
}

func (x *BatchResponse) GetObjectUrl() string {
	if x != nil {
		return x.ObjectUrl
	}
	return ""
}

type ArrowDataBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowBatch []byte `protobuf:"bytes,1,opt,name=arrow_batch,json=arrowBatch,proto3" json:"arrow_batch,omitempty"`
}

func (x *ArrowDataBatch) Reset() {
	*x = ArrowDataBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowDataBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowDataBatch) ProtoMessage() {}

func (x *ArrowDataBatch) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowDataBatch.ProtoReflect.Descriptor instead.
func (*ArrowDataBatch) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{2}
}

func (x *ArrowDataBatch) GetArrowBatch() []byte {
	if x != nil {
		return x.ArrowBatch
	}
	return nil
}

type WriterDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowBatch []byte          `protobuf:"bytes,1,opt,name=arrow_batch,json=arrowBatch,proto3" json:"arrow_batch,omitempty"`
	Connection *ConnectionInfo `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *WriterDataRequest) Reset() {
	*x = WriterDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriterDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriterDataRequest) ProtoMessage() {}

func (x *WriterDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriterDataRequest.ProtoReflect.Descriptor instead.
func (*WriterDataRequest) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{3}
}

func (x *WriterDataRequest) GetArrowBatch() []byte {
	if x != nil {
		return x.ArrowBatch
	}
	return nil
}

func (x *WriterDataRequest) GetConnection() *ConnectionInfo {
	if x != nil {
		return x.Connection
	}
	return nil
}

// 批处理请求，包含查询条件或读取参数
type BatchReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    string      `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   // 客户端id
	AssetName   string      `protobuf:"bytes,2,opt,name=assetName,proto3" json:"assetName,omitempty"` // 资产名称
	ChainInfoId int32       `protobuf:"varint,3,opt,name=chainInfoId,proto3" json:"chainInfoId,omitempty"`
	FilePath    string      `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`                           // 本地存储文件的路径
	FileType    FileType    `protobuf:"varint,6,opt,name=fileType,proto3,enum=datasource.FileType" json:"fileType,omitempty"` // 客户端保存文件类型
	DbFields    []string    `protobuf:"bytes,7,rep,name=dbFields,proto3" json:"dbFields,omitempty"`                           // 数据库字段名的字符串数组
	ServerInfo  *ServerInfo `protobuf:"bytes,8,opt,name=serverInfo,proto3" json:"serverInfo,omitempty"`                       // 服务端连接信息
}

func (x *BatchReadRequest) Reset() {
	*x = BatchReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReadRequest) ProtoMessage() {}

func (x *BatchReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReadRequest.ProtoReflect.Descriptor instead.
func (*BatchReadRequest) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{4}
}

func (x *BatchReadRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *BatchReadRequest) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *BatchReadRequest) GetChainInfoId() int32 {
	if x != nil {
		return x.ChainInfoId
	}
	return 0
}

func (x *BatchReadRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *BatchReadRequest) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILE_TYPE_UNKNOWN
}

func (x *BatchReadRequest) GetDbFields() []string {
	if x != nil {
		return x.DbFields
	}
	return nil
}

func (x *BatchReadRequest) GetServerInfo() *ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

type WrappedReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *BatchReadRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	RequestId string            `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *WrappedReadRequest) Reset() {
	*x = WrappedReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrappedReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedReadRequest) ProtoMessage() {}

func (x *WrappedReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappedReadRequest.ProtoReflect.Descriptor instead.
func (*WrappedReadRequest) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{5}
}

func (x *WrappedReadRequest) GetRequest() *BatchReadRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *WrappedReadRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// 流式任务请求
type StreamReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *ConnectionInfo `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	RequestId  string          `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	FileType   FileType        `protobuf:"varint,3,opt,name=fileType,proto3,enum=datasource.FileType" json:"fileType,omitempty"` // 客户端保存文件类型
	FilePath   string          `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *StreamReadRequest) Reset() {
	*x = StreamReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadRequest) ProtoMessage() {}

func (x *StreamReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadRequest.ProtoReflect.Descriptor instead.
func (*StreamReadRequest) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{6}
}

func (x *StreamReadRequest) GetConnection() *ConnectionInfo {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *StreamReadRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StreamReadRequest) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILE_TYPE_UNKNOWN
}

func (x *StreamReadRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbtype      string `protobuf:"bytes,1,opt,name=dbtype,proto3" json:"dbtype,omitempty"`                                //数据库类型
	Host        string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`                                    // 数据库地址
	Port        string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`                                    // 数据库端口
	User        string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`                                    // 数据库用户名
	TlsCert     string `protobuf:"bytes,5,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`               // TLS证书
	TlsCertName string `protobuf:"bytes,6,opt,name=tls_cert_name,json=tlsCertName,proto3" json:"tls_cert_name,omitempty"` // TLS文件名
	TlsCertExt  string `protobuf:"bytes,7,opt,name=tls_cert_ext,json=tlsCertExt,proto3" json:"tls_cert_ext,omitempty"`    // TLS文件名扩展
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectionInfo) GetDbtype() string {
	if x != nil {
		return x.Dbtype
	}
	return ""
}

func (x *ConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *ConnectionInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ConnectionInfo) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *ConnectionInfo) GetTlsCertName() string {
	if x != nil {
		return x.TlsCertName
	}
	return ""
}

func (x *ConnectionInfo) GetTlsCertExt() string {
	if x != nil {
		return x.TlsCertExt
	}
	return ""
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServicePort string `protobuf:"bytes,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{8}
}

func (x *ServerInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServerInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServerInfo) GetServicePort() string {
	if x != nil {
		return x.ServicePort
	}
	return ""
}

type OSSWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RequestId   string `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	FilePath    string `protobuf:"bytes,3,opt,name=filePath,proto3" json:"filePath,omitempty"`       // 本地文件路径
	FileContent []byte `protobuf:"bytes,4,opt,name=fileContent,proto3" json:"fileContent,omitempty"` // 写入文件的内容
}

func (x *OSSWriteRequest) Reset() {
	*x = OSSWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSSWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSSWriteRequest) ProtoMessage() {}

func (x *OSSWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSSWriteRequest.ProtoReflect.Descriptor instead.
func (*OSSWriteRequest) Descriptor() ([]byte, []int) {
	return file_data_source_proto_rawDescGZIP(), []int{9}
}

func (x *OSSWriteRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *OSSWriteRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OSSWriteRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OSSWriteRequest) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

var File_data_source_proto protoreflect.FileDescriptor

var file_data_source_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2d, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x31,
	0x0a, 0x0e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x70, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x30, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x12, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x45, 0x78, 0x74, 0x22, 0x6e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x4f, 0x53, 0x53,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2a, 0x88, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x56, 0x52, 0x4f, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x05, 0x32, 0xbc, 0x02, 0x0a, 0x11,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12,
	0x46, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x53, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_data_source_proto_rawDescOnce sync.Once
	file_data_source_proto_rawDescData = file_data_source_proto_rawDesc
)

func file_data_source_proto_rawDescGZIP() []byte {
	file_data_source_proto_rawDescOnce.Do(func() {
		file_data_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_source_proto_rawDescData)
	})
	return file_data_source_proto_rawDescData
}

var file_data_source_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_source_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_data_source_proto_goTypes = []any{
	(FileType)(0),              // 0: datasource.FileType
	(*Response)(nil),           // 1: datasource.Response
	(*BatchResponse)(nil),      // 2: datasource.BatchResponse
	(*ArrowDataBatch)(nil),     // 3: datasource.ArrowDataBatch
	(*WriterDataRequest)(nil),  // 4: datasource.WriterDataRequest
	(*BatchReadRequest)(nil),   // 5: datasource.BatchReadRequest
	(*WrappedReadRequest)(nil), // 6: datasource.WrappedReadRequest
	(*StreamReadRequest)(nil),  // 7: datasource.StreamReadRequest
	(*ConnectionInfo)(nil),     // 8: datasource.ConnectionInfo
	(*ServerInfo)(nil),         // 9: datasource.ServerInfo
	(*OSSWriteRequest)(nil),    // 10: datasource.OSSWriteRequest
}
var file_data_source_proto_depIdxs = []int32{
	8,  // 0: datasource.WriterDataRequest.connection:type_name -> datasource.ConnectionInfo
	0,  // 1: datasource.BatchReadRequest.fileType:type_name -> datasource.FileType
	9,  // 2: datasource.BatchReadRequest.serverInfo:type_name -> datasource.ServerInfo
	5,  // 3: datasource.WrappedReadRequest.request:type_name -> datasource.BatchReadRequest
	8,  // 4: datasource.StreamReadRequest.connection:type_name -> datasource.ConnectionInfo
	0,  // 5: datasource.StreamReadRequest.fileType:type_name -> datasource.FileType
	6,  // 6: datasource.DataSourceService.ReadBatchData:input_type -> datasource.WrappedReadRequest
	7,  // 7: datasource.DataSourceService.ReadStreamingData:input_type -> datasource.StreamReadRequest
	4,  // 8: datasource.DataSourceService.SendArrowData:input_type -> datasource.WriterDataRequest
	10, // 9: datasource.DataSourceService.WriteOSSData:input_type -> datasource.OSSWriteRequest
	2,  // 10: datasource.DataSourceService.ReadBatchData:output_type -> datasource.BatchResponse
	3,  // 11: datasource.DataSourceService.ReadStreamingData:output_type -> datasource.ArrowDataBatch
	1,  // 12: datasource.DataSourceService.SendArrowData:output_type -> datasource.Response
	1,  // 13: datasource.DataSourceService.WriteOSSData:output_type -> datasource.Response
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_data_source_proto_init() }
func file_data_source_proto_init() {
	if File_data_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_source_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ArrowDataBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WriterDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WrappedReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StreamReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OSSWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_source_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_source_proto_goTypes,
		DependencyIndexes: file_data_source_proto_depIdxs,
		EnumInfos:         file_data_source_proto_enumTypes,
		MessageInfos:      file_data_source_proto_msgTypes,
	}.Build()
	File_data_source_proto = out.File
	file_data_source_proto_rawDesc = nil
	file_data_source_proto_goTypes = nil
	file_data_source_proto_depIdxs = nil
}
